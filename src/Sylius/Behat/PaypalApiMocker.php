<?php

/*
 * This file is part of the Sylius package.
 *
 * (c) Paweł Jędrzejewski
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Sylius\Behat;

use Guzzle\Http\Message\Response;
use Guzzle\Stream\Stream;
use Mockery\Mock;
use Payum\Core\Bridge\Guzzle\HttpClient;
use Symfony\Component\HttpKernel\KernelInterface;

/**
 * @author Arkadiusz Krakowiak <arkadiusz.krakowiak@lakion.com>
 */
class PaypalApiMocker
{
    /**
     * @var BehatMockerInterface
     */
    private $behatMocker;

    /**
     * @param BehatMockerInterface $behatMocker
     */
    public function __construct(BehatMockerInterface $behatMocker)
    {
        $this->behatMocker = $behatMocker;
    }

    /**
     * {@inheritdoc}
     */
    public function mockApiSuccessfulPaymentResponse()
    {
        $firstGetExpressCheckoutDetailsStream = $this->mockStream('TOKEN=EC%2d9EV13959UR209410U&PHONENUM=227%2d130%2d9849&BILLINGAGREEMENTACCEPTEDSTATUS=0&CHECKOUTSTATUS=PaymentActionNotInitiated&TIMESTAMP=2016%2d02%2d29T11%3a20%3a36Z&CORRELATIONID=cd43c56335810&ACK=Success&VERSION=65%2e1&BUILD=18316154&EMAIL=mike%2eehrmantraut%40gmail%2ecom&PAYERID=UX8WBNYWGBVMG&PAYERSTATUS=verified&FIRSTNAME=Mike&LASTNAME=Ehrmantraut&COUNTRYCODE=PL&SHIPTONAME=Mike%20Ehrmantraut&SHIPTOSTREET=Bajkowa%202%20%2f%205%2c&SHIPTOSTREET2=Case%20postale%2012&SHIPTOCITY=Warszawa&SHIPTOZIP=00800&SHIPTOCOUNTRYCODE=PL&SHIPTOCOUNTRYNAME=Poland&CURRENCYCODE=EUR&AMT=19%2e99&ITEMAMT=19%2e99&SHIPPINGAMT=0%2e00&HANDLINGAMT=0%2e00&TAXAMT=0%2e00&INVNUM=92757%2d10268&NOTIFYURL=http%3a%2f%2f127%2e0%2e0%2e1%3a8080%2fpayment%2fnotify%2f%2dTMb4VEfLDAtynAUVdt_aaWAskDTgdZVzoeu3SlQtDw&INSURANCEAMT=0%2e00&SHIPDISCAMT=0%2e00&INSURANCEOPTIONOFFERED=false&L_QTY0=1&L_TAXAMT0=0%2e00&L_AMT0=19%2e99&PAYMENTREQUEST_0_CURRENCYCODE=EUR&PAYMENTREQUEST_0_AMT=19%2e99&PAYMENTREQUEST_0_ITEMAMT=19%2e99&PAYMENTREQUEST_0_SHIPPINGAMT=0%2e00&PAYMENTREQUEST_0_HANDLINGAMT=0%2e00&PAYMENTREQUEST_0_TAXAMT=0%2e00&PAYMENTREQUEST_0_INVNUM=92757%2d10268&PAYMENTREQUEST_0_NOTIFYURL=http%3a%2f%2f127%2e0%2e0%2e1%3a8080%2fpayment%2fnotify%2f%2dTMb4VEfLDAtynAUVdt_aaWAskDTgdZVzoeu3SlQtDw&PAYMENTREQUEST_0_INSURANCEAMT=0%2e00&PAYMENTREQUEST_0_SHIPDISCAMT=0%2e00&PAYMENTREQUEST_0_SELLERPAYPALACCOUNTID=alanmerchant%40gmail%2ecom&PAYMENTREQUEST_0_INSURANCEOPTIONOFFERED=false&PAYMENTREQUEST_0_SHIPTONAME=Mike%20Ehrmantraut&PAYMENTREQUEST_0_SHIPTOSTREET=Bajkowa%202%20%2f%205%2c&PAYMENTREQUEST_0_SHIPTOSTREET2=Case%20postale%2012&PAYMENTREQUEST_0_SHIPTOCITY=Warszawa&PAYMENTREQUEST_0_SHIPTOZIP=00800&PAYMENTREQUEST_0_SHIPTOCOUNTRYCODE=PL&PAYMENTREQUEST_0_SHIPTOCOUNTRYNAME=Poland&PAYMENTREQUEST_0_ADDRESSSTATUS=Confirmed&L_PAYMENTREQUEST_0_QTY0=1&L_PAYMENTREQUEST_0_TAXAMT0=0%2e00&L_PAYMENTREQUEST_0_AMT0=19%2e99&PAYMENTREQUESTINFO_0_ERRORCODE=0');
        $firstGetExpressCheckoutDetailsResponse = $this->mockHttpResponse(200, $firstGetExpressCheckoutDetailsStream);

        $doExpressCheckoutPaymentStream = $this->mockStream('TOKEN=EC%2d9EV13959UR209410U&SUCCESSPAGEREDIRECTREQUESTED=false&TIMESTAMP=2016%2d02%2d29T11%3a21%3a54Z&CORRELATIONID=c32797e44a301&ACK=Success&VERSION=65%2e1&BUILD=18316154&INSURANCEOPTIONSELECTED=false&SHIPPINGOPTIONISDEFAULT=false&PAYMENTINFO_0_TRANSACTIONID=60R39504PU561661X&PAYMENTINFO_0_TRANSACTIONTYPE=cart&PAYMENTINFO_0_PAYMENTTYPE=instant&PAYMENTINFO_0_ORDERTIME=2016%2d02%2d29T11%3a21%3a53Z&PAYMENTINFO_0_AMT=19%2e99&PAYMENTINFO_0_FEEAMT=0%2e93&PAYMENTINFO_0_TAXAMT=0%2e00&PAYMENTINFO_0_CURRENCYCODE=EUR&PAYMENTINFO_0_PAYMENTSTATUS=Completed&PAYMENTINFO_0_PENDINGREASON=None&PAYMENTINFO_0_REASONCODE=None&PAYMENTINFO_0_PROTECTIONELIGIBILITY=Eligible&PAYMENTINFO_0_PROTECTIONELIGIBILITYTYPE=ItemNotReceivedEligible%2cUnauthorizedPaymentEligible&PAYMENTINFO_0_ERRORCODE=0&PAYMENTINFO_0_ACK=Success');
        $doExpressCheckoutPaymentResponse = $this->mockHttpResponse(200, $doExpressCheckoutPaymentStream);

        $secondGetExpressCheckoutDetailsStream = $this->mockStream('TOKEN=EC%2d9EV13959UR209410U&PHONENUM=227%2d130%2d9849&BILLINGAGREEMENTACCEPTEDSTATUS=0&CHECKOUTSTATUS=PaymentActionCompleted&TIMESTAMP=2016%2d02%2d29T11%3a25%3a05Z&CORRELATIONID=98ff73b46705c&ACK=Success&VERSION=65%2e1&BUILD=18316154&EMAIL=mike%2eehrmantraut%40gmail%2ecom&PAYERID=UX8WBNYWGBVMG&PAYERSTATUS=verified&FIRSTNAME=Mike&LASTNAME=Ehrmantraut&COUNTRYCODE=PL&SHIPTONAME=Mike%20Ehrmantraut&SHIPTOSTREET=Bajkowa%202%20%2f%205%2c&SHIPTOSTREET2=Case%20postale%2012&SHIPTOCITY=Warszawa&SHIPTOZIP=00800&SHIPTOCOUNTRYCODE=PL&SHIPTOCOUNTRYNAME=Poland&CURRENCYCODE=EUR&AMT=19%2e99&ITEMAMT=19%2e99&SHIPPINGAMT=0%2e00&HANDLINGAMT=0%2e00&TAXAMT=0%2e00&INVNUM=92757%2d10268&NOTIFYURL=http%3a%2f%2f127%2e0%2e0%2e1%3a8080%2fpayment%2fnotify%2f%2dTMb4VEfLDAtynAUVdt_aaWAskDTgdZVzoeu3SlQtDw&INSURANCEAMT=0%2e00&SHIPDISCAMT=0%2e00&TRANSACTIONID=60R39504PU561661X&INSURANCEOPTIONOFFERED=false&L_NAME0=1&L_QTY0=1&L_TAXAMT0=0%2e00&L_AMT0=19%2e99&PAYMENTREQUEST_0_CURRENCYCODE=EUR&PAYMENTREQUEST_0_AMT=19%2e99&PAYMENTREQUEST_0_ITEMAMT=19%2e99&PAYMENTREQUEST_0_SHIPPINGAMT=0%2e00&PAYMENTREQUEST_0_HANDLINGAMT=0%2e00&PAYMENTREQUEST_0_TAXAMT=0%2e00&PAYMENTREQUEST_0_INVNUM=92757%2d10268&PAYMENTREQUEST_0_NOTIFYURL=http%3a%2f%2f127%2e0%2e0%2e1%3a8080%2fpayment%2fnotify%2f%2dTMb4VEfLDAtynAUVdt_aaWAskDTgdZVzoeu3SlQtDw&PAYMENTREQUEST_0_INSURANCEAMT=0%2e00&PAYMENTREQUEST_0_SHIPDISCAMT=0%2e00&PAYMENTREQUEST_0_TRANSACTIONID=60R39504PU561661X&PAYMENTREQUEST_0_SELLERPAYPALACCOUNTID=alanmerchant%40gmail%2ecom&PAYMENTREQUEST_0_INSURANCEOPTIONOFFERED=false&PAYMENTREQUEST_0_SHIPTONAME=Mike%20Ehrmantraut&PAYMENTREQUEST_0_SHIPTOSTREET=Bajkowa%202%20%2f%205%2c&PAYMENTREQUEST_0_SHIPTOSTREET2=Case%20postale%2012&PAYMENTREQUEST_0_SHIPTOCITY=Warszawa&PAYMENTREQUEST_0_SHIPTOZIP=00800&PAYMENTREQUEST_0_SHIPTOCOUNTRYCODE=PL&PAYMENTREQUEST_0_SHIPTOCOUNTRYNAME=Poland&PAYMENTREQUEST_0_ADDRESSSTATUS=Confirmed&L_PAYMENTREQUEST_0_NAME0=1&L_PAYMENTREQUEST_0_QTY0=1&L_PAYMENTREQUEST_0_TAXAMT0=0%2e00&L_PAYMENTREQUEST_0_AMT0=19%2e99&PAYMENTREQUESTINFO_0_TRANSACTIONID=60R39504PU561661X&PAYMENTREQUESTINFO_0_ERRORCODE=0');
        $secondGetExpressCheckoutDetailsResponse = $this->mockHttpResponse(200, $secondGetExpressCheckoutDetailsStream);

        $getTransactionDetailsStream = $this->mockStream('RECEIVERBUSINESS=alanmerchant%40gmail%2ecom&RECEIVEREMAIL=alanmerchant%40gmail%2ecom&RECEIVERID=K2XEH9B3Z2CWW&EMAIL=mike%2eehrmantraut%40gmail%2ecom&PAYERID=UX8WBNYWGBVMG&PAYERSTATUS=verified&COUNTRYCODE=PL&SHIPTONAME=Mike%20Ehrmantraut&SHIPTOSTREET=Bajkowa%202%20%2f%205%2c&SHIPTOSTREET2=Case%20postale%2012&SHIPTOCITY=Warszawa&SHIPTOCOUNTRYCODE=PL&SHIPTOCOUNTRYNAME=Poland&SHIPTOZIP=00800&ADDRESSOWNER=PayPal&ADDRESSSTATUS=Confirmed&INVNUM=92757%2d10268&SALESTAX=0%2e00&SHIPDISCOUNT=0%2e00&INSURANCEAMOUNT=0%2e00&TIMESTAMP=2016%2d02%2d29T11%3a25%3a53Z&CORRELATIONID=208eab6692fb&ACK=Success&VERSION=65%2e1&BUILD=18316154&FIRSTNAME=Mike&LASTNAME=Ehrmantraut&TRANSACTIONID=60R39504PU561661X&TRANSACTIONTYPE=cart&PAYMENTTYPE=instant&ORDERTIME=2016%2d02%2d29T11%3a21%3a53Z&AMT=19%2e99&FEEAMT=0%2e93&TAXAMT=0%2e00&SHIPPINGAMT=0%2e00&HANDLINGAMT=0%2e00&CURRENCYCODE=EUR&PAYMENTSTATUS=Completed&PENDINGREASON=None&REASONCODE=None&SHIPPINGMETHOD=Default&PROTECTIONELIGIBILITY=Eligible&PROTECTIONELIGIBILITYTYPE=ItemNotReceivedEligible%2cUnauthorizedPaymentEligible&L_NAME0=1&L_QTY0=1&L_TAXAMT0=0%2e00&L_SHIPPINGAMT0=0%2e00&L_HANDLINGAMT0=0%2e00&L_CURRENCYCODE0=EUR&L_AMT0=19%2e99');
        $getTransactionDetailsResponse = $this->mockHttpResponse(200, $getTransactionDetailsStream);

        $this->behatMocker->mockService('payum.http_client', HttpClient::class)
            ->shouldReceive('send')
            ->times(4)
            ->andReturn($firstGetExpressCheckoutDetailsResponse, $doExpressCheckoutPaymentResponse, $secondGetExpressCheckoutDetailsResponse, $getTransactionDetailsResponse)
        ;
    }

    /**
     * {@inheritdoc}
     */
    public function mockApiPaymentInitializeResponse()
    {
        $setExpressCheckoutStream = $this->mockStream('TOKEN=EC%2d9EV13959UR209410U&TIMESTAMP=2016%2d02%2d29T11%3a18%3a15Z&CORRELATIONID=30d33be3d84ef&ACK=Success&VERSION=65%2e1&BUILD=18316154');
        $setExpressCheckoutResponse = $this->mockHttpResponse(200, $setExpressCheckoutStream);

        $getExpressCheckoutDetailsStream = $this->mockStream('TOKEN=EC%2d9EV13959UR209410U&BILLINGAGREEMENTACCEPTEDSTATUS=0&CHECKOUTSTATUS=PaymentActionNotInitiated&TIMESTAMP=2016%2d02%2d29T11%3a19%3a22Z&CORRELATIONID=90278b4d5eaf9&ACK=Success&VERSION=65%2e1&BUILD=18316154&CURRENCYCODE=EUR&AMT=19%2e99&ITEMAMT=19%2e99&SHIPPINGAMT=0%2e00&HANDLINGAMT=0%2e00&TAXAMT=0%2e00&INVNUM=92757%2d10268&NOTIFYURL=http%3a%2f%2f127%2e0%2e0%2e1%3a8080%2fpayment%2fnotify%2f%2dTMb4VEfLDAtynAUVdt_aaWAskDTgdZVzoeu3SlQtDw&INSURANCEAMT=0%2e00&SHIPDISCAMT=0%2e00&L_QTY0=1&L_TAXAMT0=0%2e00&L_AMT0=19%2e99&L_ITEMWEIGHTVALUE0=%20%20%200%2e00000&L_ITEMLENGTHVALUE0=%20%20%200%2e00000&L_ITEMWIDTHVALUE0=%20%20%200%2e00000&L_ITEMHEIGHTVALUE0=%20%20%200%2e00000&PAYMENTREQUEST_0_CURRENCYCODE=EUR&PAYMENTREQUEST_0_AMT=19%2e99&PAYMENTREQUEST_0_ITEMAMT=19%2e99&PAYMENTREQUEST_0_SHIPPINGAMT=0%2e00&PAYMENTREQUEST_0_HANDLINGAMT=0%2e00&PAYMENTREQUEST_0_TAXAMT=0%2e00&PAYMENTREQUEST_0_INVNUM=92757%2d10268&PAYMENTREQUEST_0_NOTIFYURL=http%3a%2f%2f127%2e0%2e0%2e1%3a8080%2fpayment%2fnotify%2f%2dTMb4VEfLDAtynAUVdt_aaWAskDTgdZVzoeu3SlQtDw&PAYMENTREQUEST_0_INSURANCEAMT=0%2e00&PAYMENTREQUEST_0_SHIPDISCAMT=0%2e00&PAYMENTREQUEST_0_INSURANCEOPTIONOFFERED=false&L_PAYMENTREQUEST_0_QTY0=1&L_PAYMENTREQUEST_0_TAXAMT0=0%2e00&L_PAYMENTREQUEST_0_AMT0=19%2e99&L_PAYMENTREQUEST_0_ITEMWEIGHTVALUE0=%20%20%200%2e00000&L_PAYMENTREQUEST_0_ITEMLENGTHVALUE0=%20%20%200%2e00000&L_PAYMENTREQUEST_0_ITEMWIDTHVALUE0=%20%20%200%2e00000&L_PAYMENTREQUEST_0_ITEMHEIGHTVALUE0=%20%20%200%2e00000&PAYMENTREQUESTINFO_0_ERRORCODE=0');
        $getExpressCheckoutDetailsResponse = $this->mockHttpResponse(200, $getExpressCheckoutDetailsStream);

        $this->behatMocker->mockService('payum.http_client', HttpClient::class)
            ->shouldReceive('send')
            ->twice()
            ->andReturn($setExpressCheckoutResponse, $getExpressCheckoutDetailsResponse)
        ;
    }

    /**
     * @param string $content
     *
     * @return Mock
     */
    private function mockStream($content)
    {
        $mockedStream = $this->behatMocker->mockCollaborator(Stream::class);
        $mockedStream->shouldReceive('getContents')->once()->andReturn($content);
        $mockedStream->shouldReceive('close')->once()->andReturn();

        return $mockedStream;
    }

    /**
     * @param int $statusCode
     * @param mixed $streamMock
     *
     * @return Mock
     */
    private function mockHttpResponse($statusCode, $streamMock)
    {
        $mockedHttpResponse = $this->behatMocker->mockCollaborator(Response::class);
        $mockedHttpResponse->shouldReceive('getStatusCode')->once()->andReturn($statusCode);
        $mockedHttpResponse->shouldReceive('getBody')->once()->andReturn($streamMock);

        return $mockedHttpResponse;
    }
}
